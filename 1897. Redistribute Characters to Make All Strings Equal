class Solution {
    public boolean makeEqual(String[] words){
        if(words.length==1) return true;    //edge case
        int count[] = new int[26];
        int totalchars=0;
        for(int i=0;i<words.length;i++){
            for(int j=0;j<words[i].length();j++){
                count[words[i].charAt(j)-'a']++;
                totalchars++;
            }
        }
        if(totalchars%words.length != 0) return false;   //since equal division failed
        int eachfreq=totalchars/words.length;
        for(int i=0;i<count.length;i++){
            if(count[i]!=0 && count[i]%words.length!=0) return false;
        }
        return true;
    }
}

/*
LOGIC---
In order to make strings equal, we only need to make sure all letters present in the array can be "evenly distributed".

Since, we can move any number of characters in the words present in array.
We would want the total number of each character be equal and their frequnecy divisible by the number of words present in array. 

Each character count should be a multiple of the number of strings in the array.
i.e. if count[i] % N != 0, return false 

Note : EDGE CASE
When there is only one word always true
*/
