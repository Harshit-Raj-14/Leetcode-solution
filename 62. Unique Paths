/* MEMOISATION DP */
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m+1][n+1];
        for(int[] row : dp) Arrays.fill(row, -1);
        return solve(m, n, 0, 0, dp);
    }

    public int solve(int m, int n, int i, int j, int dp[][]){
        if(i==m-1 && j==n-1) return 1;
        if(i>m-1 || j>n-1) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int right = solve(m, n, i+1, j, dp);
        int down = solve(m, n, i, j+1, dp);
        return dp[i][j]=right+down;
    }
}

/*
LOGIC---
Simple recursion of either going right or down.
*/


/* RECURSION TLE */
class Solution {
    public int uniquePaths(int m, int n) {
        return solve(m, n, 0, 0);
    }

    public int solve(int m, int n, int i, int j){
        if(i==m-1 && j==n-1) return 1;
        if(i>m-1 || j>n-1) return 0;
        int right = solve(m, n, i+1, j);
        int down = solve(m, n, i, j+1);
        return right+down;
    }
}
