/* SLIDING WINDOW O(n) */
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        double ans=Long.MIN_VALUE;
        int sum=0;
        for (int i=0; i<k; i++){   // Create the first window
            sum += nums[i];
        }
        ans = Math.max(ans, sum/(k*1.0));
        // Slide the window across the array
        for (int i=k; i<nums.length; i++){  //from now on subtract the first element from window and add the next element to the  window
            sum += nums[i] - nums[i-k];
            ans = Math.max(ans, sum/(k*1.0));
        }
        return ans;
    }
}


/* BRUTE FORCE O(n*K) */
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        double ans=Long.MIN_VALUE;
        for(int i=0;i<=nums.length-k;i++){
            int sum=0;
            for(int j=i;j<i+k;j++){
                sum+=nums[j];
            }
            ans = Math.max(ans, sum/(k*1.0));
        }
        return ans;
    }
}
