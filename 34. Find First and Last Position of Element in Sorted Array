/* O(logn) BINARY SEARCH */
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=firstBinary(nums, target);
        int last=lastBinary(nums, target);
        return new int[] {first, last};
    }

    public static int firstBinary(int nums[], int target){
        int first=-1;
        int l=0;
        int r=nums.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target){
                if(mid==0 || nums[mid-1]!=target) {first=mid; break;}   //condition for first
                else r=mid-1;   //move to left side to find first
            }
            else if(nums[mid]<target) l=mid+1;
            else r=mid-1;
        }
        return first;
    }

    public static int lastBinary(int nums[], int target){
        int last=-1;
        int l=0;
        int r=nums.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target){
                if(mid==nums.length-1 || nums[mid+1]!=target) {last=mid; break;}//condition for last
                else l=mid+1;   //move to right side to find last
            }
            else if(nums[mid]<target) l=mid+1;
            else r=mid-1;
        }
        return last;
    }
}


LOGIC---
At first use binary search to find target.
When your mid value will be equal to the target, then use two different binary search on the left part and right part of the mid.

    Initialize two variables, first and last, to -1.
    Perform a binary search to find the target element.
    When you find the target element, update first to the current index and continue searching for the first occurrence in the left subarray.
    Similarly, update last to the current index and continue searching for the last occurrence in the right subarray.
    Continue until the binary search terminates.
    Return first and last.



/* O(n) PARTIAL BINARY SEARCH */
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=-1;
        int last=-1;
        int l=0;
        int r=nums.length-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target){
                int i=mid;
                while(i>=0 && nums[i]==target){ //making sure our first is the leftmost target
                    first=i;
                    i--;
                }
                i=mid;
                while(i<nums.length && nums[i]==target){//making sure our last is the rightmost target
                    last=i;
                    i++;
                }
            }
            if(nums[mid]>target){
                r=mid-1;
            }
            else l=mid+1;
        }
        return new int[] {first, last};
    }
}

LOGIC---
For testcase : [8,8,8,8,8,8,8] target =mid
The above will become binary search becomes a linear search becuase of your while step




/* O(n) LINEAR SEARCH */
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=-1;
        int last=-1;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                first=i;
                while(i<nums.length && nums[i]==target){
                    last=i;
                    i++;
                }
            }
        }
        return new int[] {first, last};
    }
}
