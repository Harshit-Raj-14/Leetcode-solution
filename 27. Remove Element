//LEETCODE PROBLEM
//LEVEL - Easy
//27. Remove Element

// EFFECTIVE JAVA SOLUTION - TWO POINTERS //
class Solution {
    public int removeElement(int[] nums, int val) {
        int count = 0;    //count is like a nextposition of the final array
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != val) {
                nums[count++] = nums[i];
            }
        }
        return count;
    }
}
//TC - O(n)
//SC - O(1)
//LOGIC == We will take a variable count, it will count the elements except given value. Count and i are two pointers. 
i keep moving forward while counter only moves when there is no match.
We will iterate through array and check if element match with given value and add the next element at that place which is not equal to value.



//BRUTE FORCE ACCEPTED SOLUTION //
class Solution {
    public int removeElement(int[] nums, int val) {
        int a = Integer.MAX_VALUE;
        int counter =0;
        for (int i=0; i<nums.length;i++){
            if(nums[i]==val){
                nums[i]=a;
                counter++;
            }
        }
        Arrays.sort(nums);
        return nums.length-counter;   
    }
}

//TC - O(n)
//beats - only 40%
//LOGIC == Replace the val with INT MAX, and then sort the array. Return length after subtracting the occurences and all the values to be replaced are pushed to last in nums.











//LOGIC == We can move all the occurrences of this element to the end of the array. Use two pointers! We can move the occurence and swap it with the last element.
