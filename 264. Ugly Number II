/* DYNAMIC PROGRAMMING O(n) */
class Solution {
    public int nthUglyNumber(int n) {
        int dp[] = new int[n+1];
        dp[0]=0;
        dp[1]=1;
        int x=1, y=1, z=1;
        for(int i=2;i<=n;i++){
            dp[i]=Math.min(Math.min(dp[x]*2, dp[y]*3), dp[z]*5);    //general: min(dp[x]*2, dp[y]*3, dp[z]*5)
            //Now to check which of the above got chosen
            if(dp[i]==dp[x]*2) x++;
            if(dp[i]==dp[y]*3) y++; // now don't use else if : reason explained
            if(dp[i]==dp[z]*5) z++;
        }
        return dp[n];
    }
}

LOGIC---
dp[0] = 0;
dp[1] = 1;
dp[2] = 2; //(2*1) => min(dp[1]*2, dp[1]*3, dp[1]*5) => since dp[1]*2 is selected i++ but we only want for that happen for x.

Hence we get a general idea that perhaps we should maintain and treat this as three different kind of lists. Since we want nth number we need to find all ugly numbers in order. But we will be multiplyign them in different combinations of 2,3,5 causing them not being ascending. Hence we need to take minimum first giving us the general formula:
dp[i]=min(dp[k]*2, dp[k]*3, dp[k]*5)
Now what is k : k refers to the different count of each 2,3,5. Now we need to keep tabs of them as well.
Since it will be differnet each of these is going to have differnet values.
So, x refers 2 series, y refers 3 series and z refers 5 series. 

So, dp[i]=MIN(dp[x]*2, dp[y]*3, dp[z]*5)
Initially, x=y=z=1; //since we are starting from dp[1]
Now whichever gets chosen its series index gets incremented to proceed further in series 
eg: in above dp[2] 'x' series was chosen so move it to next index x++; So, x became 2.

dp[3] = 3; //(3*1) => min(dp[2]*2, dp[1]*3, dp[1]*5) => min(4,3,5) => 3 chosen and do y++ => y=2
dp[4] = 4; //(2*2) => min(dp[2]*2, dp[2]*3, 5*dp[1]) => (4,6,5) => 4 is chosen and x++ => x=3 
dp[5] = 5; //(5*1) => min(dp[3]*2, dp[2]*3, 5*dp[1]) => (8,6,5) => 5 i chosen and ++ => z=2
and so on...
dp[6] = 6;


Note : don't use else if
Reason: Consider a situation dp[3]*2; dp[2]*3 => both gives 6
If you would have used else if, then only one of x or y gets incremented and in the next iteration we get a duplicate.
If two or more prime factors result in the same value, each corresponding counter is incremented, avoiding the duplicacy.
So, we will actually be incrementing both x and y together.



/* BRUTE FORCE TLE O(nlogn)*/
class Solution {
    public int nthUglyNumber(int n) {
        int count=0;
        int i=0;
        int ans=0;
        while(count<n){
            if(isUgly(i)){
                ans=i;
                count++;
            }
            i++;
        }
        return ans;
    }
    public static boolean isUgly(int n){
        if(n<=0) return false;  //don't forget this condition otherwise leads to infinte loop at 0
        while(n%2==0) n/=2;
        while(n%3==0) n/=3;
        while(n%5==0) n/=5;
        return n==1;
    }
}


LOGIC ---
We keep finding ugly numbers until we get to the nth number.
Call isUgly for every number until you reach the nth one.
O(n) -> loop
O(logn) -> isUgly()
