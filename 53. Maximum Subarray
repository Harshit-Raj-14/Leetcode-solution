//LEETCODE PROBLEM
//LEVEL - Easy
//53. Maximum Subarray



/* ACCEPTED JAVA KADANE'S ALGORITHM O(n) */ (works for even all -ve no cases)
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE, currSum = 0; 
        for(int i=0;i<nums.length;i++){
            currSum += nums[i];
            if(currSum<0) currSum = 0;
            maxSum = Math.max(maxSum,currSum);        
        }      
        return maxSum;
    }
}
//Kadane's Algo == if overall sum become negative then it is better to take reinitialize sum to zero , beacuse may be possible later we have positive sum.
but if we move with negative sum then it only decrease our positive sum.
so it better to reinitialize sum to 0 means start new subarray from next index.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* ACCEPTED JAVA KADANE'S ALGORITHM O(n) ==== (HANDLING THE ALL -VE ELEMENT CASE SEPERATELY */
class Solution {
    public int maxSubArray(int[] nums) {
        int currSum=0; int maxSum=Integer.MIN_VALUE; int counter=0;   
        for(int i=0;i<nums.length;i++){
            if(nums[i]<0) counter++;
            if(counter==nums.length){
                Arrays.sort(nums);
                return nums[nums.length-1];
            }
/*here we have taken care of the special case where all eleemnts are -ve in array so first check that if it s true or not. 
then the max sum will be the least -ve element. this can be found out by running a loop for finding minumum. 
or we just sort it and the last element will be the least -ve integer.*/
        }
        
        for(int i=0;i<nums.length;i++){
            currSum+=nums[i];
            if(currSum<0) currSum=0;    //reset to 0 and restart why carry -ve
            maxSum=Math.max(maxSum, currSum);
        }
        return maxSum;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* Dynamic Programming recursive solution */

public int maxSubArray(int[] A) {
        int n = A.length;
        int[] dp = new int[n];  //dp[i] means the maximum subarray ending with A[i];
        dp[0] = A[0];
        int max = dp[0];
        
        for(int i = 1; i < n; i++){
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);   //recursive call   //dp[i] = Math.max(A[i] + dp[i - 1] , A[i]);
            max = Math.max(max, dp[i]);
        }
        
        return max;
}

Loguc : we divide the subproblem a tthe final step

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* RECURSIVE DP SOLUTION */

public static int maxSubArray(int[] A) {
    int maxSoFar=A[0], maxEndingHere=A[0];
    for (int i=1;i<A.length;++i){
    	maxEndingHere= Math.max(maxEndingHere+A[i],A[i]);
    	maxSoFar=Math.max(maxSoFar, maxEndingHere);	
    }
    return maxSoFar;
}
//PART OF A RESEARCH PPAER
LOGIC == algorithm that operates on arrays: it starts at the left end (element A[1]) and scans through to the right end (element A[n]), 
keeping track of the maximum sum subvector seen so far. The maximum is initially A[0]. 
Suppose we've solved the problem for A[1 .. i - 1]; how can we extend that to A[1 .. i]? The maximum sum in the first I elements is either the 
maximum sum in the first i - 1 elements (which we'll call MaxSoFar), 
or it is that of a subvector that ends in position i (which we'll call MaxEndingHere).
MaxEndingHere is either A[i] plus the previous MaxEndingHere, or just A[i], whichever is larger.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* O(n^2) NOT ACCEPTED PREFIX ARRAY APPROACH SOLUTION */

class Solution {
    public int maxSubArray(int[] nums) {
        int maxSum=Integer.MIN_VALUE;
        int currSum=0;
        int prefix[]= new int[nums.length];
        prefix[0]=nums[0];
        for(int i=1; i<nums.length;i++)
        {
            prefix[i]=prefix[i-1]+nums[i];
        }
        
        for(int i=0; i<nums.length;i++)
        {
            int start=i;
            for(int j=i; j<nums.length;j++)
            {
                int end=j;
currSum= (start==0) ? prefix[end] : prefix[end]-prefix[i-1]; //to tackle i-1 case as it will give arrayoutofbound exception. when i=0 it will simply return a single element
                maxSum=Math.max(maxSum, currSum);
            }
        }
        return maxSum;
    }
}
//Logic - here we have tried making a prefix array. An array that has sum from 0 to i element of nums in its own i th index.
now currSum= sum of subarrays = prefix[end]-prefix[i-1]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* O(n^2) NOT ACCEPTED BRUTE FORCE SOLUTION */
class Solution {
    public int maxSubArray(int[] nums) {
        int maxSum=Integer.MIN_VALUE;
        for(int i=0; i<nums.length;i++){     
            for(int j=i, currSum=0; j<nums.length;j++){     
                    currSum+=nums[j];
                    maxSum=Math.max(maxSum, currSum); 
                    }
            }
        }
        return maxSum;
    }
}
//Logic - same as below

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* O(n^3) NOT ACCEPTED BRUTE FORCE SOLUTION */
class Solution {
    public int maxSubArray(int[] nums) {
        int currSum=0;
        int maxSum=Integer.MIN_VALUE;
        for(int i=0; i<nums.length;i++)
        {
            int start =i;     
            for(int j=i; j<nums.length;j++)
            {
                int end=j;
                currSum=0;
                for(int k=start; k<=end;k++)
                {
                    currSum+=nums[k];
                    if(currSum>maxSum)
                    {
                        maxSum=currSum;
                    }
                }
            }
        }
        //Logic : we take a first start elemnt and an end element. we take all elements in between them which will be the subarray.
        Now we find the sum of each of these subarrays and comapre to find max sum.
        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Approch 1: Divide and Conquer Approch

Split our array into two halves
case1: maxSum subaaray occur in left half ,
case2: maxSum subarray occur in right half
case3: maxSum subaaray lies about middle of array

We use here divide and conquer approch here , split array into two halves about middle
take anwer from left , right , and subArray about middle.
Let assume recusion will give us answer for left and right part , how do we calculate maxsum subarray about mid :
[-2,1,-3,4,-1,2,1,-5,4]
i = 0 , j = 8
mid = (0+8)/2 = 4
step 1) Caluate maxSum (maximum positive sum) from mid to left

     int sum = 0,leftMaxSUM = Integer.MIN_VALUE;
	for(int l =  mid;l>=i;l--){
		sum+=nums[l];
		if(sum>leftMaxSUM ){
			leftMaxSUM =  sum;
		}                                    
	}

step 2) calculate maxSum(maximum positive sum ) from mid+1 to right side

int rightMaxSUM = Integer.MIN_VALUE; 
sum = 0;    // reset sum to 0
       for (int l = mid + 1; l <=j; l++)
       {
           sum += nums[l];
           if (sum > rightMaxSUM ) {
               rightMaxSUM = sum;
           }
       }

int midSum = leftMaxSUM+rightMaxSUM

Let code it
---- divide and conquer approch -------------------

public int maxSubArray(int[] nums) {
    
        return helper(nums,0,nums.length-1);
    }
    
    public int helper(int nums[],int i,int j){

        if(i==j){
            return nums[i];
        }
                          
        int mid  =  (i+j)/2;
        int sum = 0,leftMaxSUM = Integer.MIN_VALUE;
        
        for(int l =  mid;l>=i;l--){
            sum+=nums[l];
            if(sum>leftMaxSUM){
                leftMaxSUM =  sum;
            }                                    
        }
        
     int rightMaxSUM = Integer.MIN_VALUE;
        sum = 0;    // reset sum to 0
        for (int l = mid + 1; l <=j; l++)
        {
            sum += nums[l];
            if (sum > rightMaxSUM ) {
                rightMaxSUM = sum;
            }
        }
        
       int maxLeftRight = Math.max(helper(nums, i, mid),
                                    helper(nums, mid + 1, j ));
        return Math.max(maxLeftRight, leftMaxSUM + rightMaxSUM );
        
        
    
    }
    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Approch 2 : Dynamic Programming

Take one varibale as a global maximum , say max (To keep track maximum value)
dp[i] means max sum subarray ending at index i
If sum till i-1 is is usefull , then take it other wise take current cell as sum till i

public int maxSubArray(int[] nums) {
   int storage []=  new int[nums.length];
   int max  =  nums[0];
   storage[0 ] =  nums[0];
   for( int i=1;i<nums.length ;i++  ){
       storage[i] =  Math.max( storage[i-1]+nums[i] ,  nums[i]);
       if(storage[i]>max){
           max=  storage[i];
       }
   }
   return max;    
     }

        
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
IMPORTANT QUESTION : What if the interviewer asks to also print the maximum sum subarray?

//And also print that subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        
        int maxi = nums[0];
        int start = 0, end = 0; // the final start and end position of the maximum sum subarray
        
        int sum = 0;
        int s = 0, // the temporary start position
        
        for(int i=0;i<n;i++){
            
            sum += nums[i];
      
            
            if(sum > maxi){
                maxi = sum;
                start = s;
                end = i;
            }
            
            if(sum < 0){
                sum = 0;
                s = i+1;
            }   
        }
        
        cout<<"Maximum Sum Subarray from nums["<<start<<"] = "<<nums[start]<<" till nums["<<end<<"] = "<<nums[end]<<endl;
        
        return maxi; 
    }
};
