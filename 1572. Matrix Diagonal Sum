/* O(n) */
class Solution {
    public int diagonalSum(int[][] mat) {
        int sum = 0;
        for (int i = 0; i < mat.length; i++) {
            sum+=mat[i][i]; //primary diagonal element
            sum+=mat[i][mat.length-1 - i];  //secondary diagonal element 
        }
        if(mat.length%2==0) return sum; //matrix with even length will not have a center
        else return sum-mat[mat.length/2][mat.length/2];        //matrix of odd length will have a center and so to count only once subtract
    }
}



/* O(n^2) BEATS 30% */
class Solution {
    public int diagonalSum(int[][] mat) {
        int sum = 0;
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                if (i == j || (i + j) == (mat.length - 1)) {    //same as printing "X" pattern
                    sum += mat[i][j];
                }
            }
        }
        return sum;
    }
}
