/* DIRECT FORMULA */
class Solution {
    public double largestTriangleArea(int[][] p) {
        double area = 0;
        for (int[] i: p)
            for (int[] j: p)
                for (int[] k: p)
            area = Math.max(area, 0.5 * Math.abs(i[0] * j[1] + j[0] * k[1] + k[0] * i[1]- j[0] * i[1] - k[0] * j[1] - i[0] * k[1]));
        return area;
    }
}

LOGIC---
Area = (1/2) (x1(y2 − y3) + x2(y3 − y1) + x3(y1 − y2))

Time complexity:O(n^3)
Space complexity: O(1)



/* ELEGANT SOLUTION 8/
class Solution {
    public double largestTriangleArea(int[][] points) {
        double area=0;
        for(int[] A:points){
            for(int[] B:points){
                for(int[] C:points){
                    area=Math.max(area,0.5*calcArea(A,B,C));
                }
            }
        }
        return area;
    }
    
    public double calcArea(int[] A,int[] B,int[] C){
        int ABx=B[0]-A[0];
        int ACy=C[1]-A[1];
        int ABy=B[1]-A[1];
        int ACx=C[0]-A[0];
        return Math.abs(ABx*ACy-ABy*ACx);
    }
}



/* ELEGANT SOLUTION */
class Solution {
    public double largestTriangleArea(int[][] points) {
        double ans = 0;
        int n = points.length;

        for(int i =0; i<n; i++)
            for(int j =i+1; j<n; j++)
                for(int k =j+1; k<n; k++)
                    ans = Math.max(ans , Math.abs(area(points[i], points[j], points[k])));
        return ans;
    }
    public static double area(int[] x1, int[] x2, int[] x3)
    {
        int t1 = x1[0] * ( x2[1] - x3[1]);
        int t2 = x2[0] * ( x3[1] - x1[1]);
        int t3 = x3[0] * ( x1[1] - x2[1]);
        return (double)( t1 + t2 + t3 )/2;
    }
}
