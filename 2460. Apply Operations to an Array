/* O(n) ACCEPTED SOLUTION */
class Solution {
    public int[] applyOperations(int[] nums) {
        for(int i=0;i+1<nums.length;i++){
            if(nums[i]==nums[i+1]){
                nums[i]*=2;
                nums[i+1]=0;
            }
        }
        //using two pointer approach to move all 0's to end
        int slow=0;
        int fast=0;
        while(fast<nums.length){
            if(nums[fast]!=0){
                nums[slow]=nums[fast];
                slow++;
            }
            fast++;
        }
        while(slow<nums.length){    //filling left over array with 0
            nums[slow]=0;
            slow++;
        }
        return nums;
    }
}

LOGIC ---
This problem consists of two parts.
1) Doing what the question told us
2) Move all zeroes to end of array - that is basicall another question completely - 283. Move Zeroes
The first part is easy.
The second part has three approaches
MI - two pointer approach - fast pointer skip all 0, slow pointer move 1 step each time to fill in the new array at the end we fill the remaining array with 0
We have used method 1 above - TC-O(n) SC-O(1)

MII - using set - Count number of 0's
copy elements of nums in an arraylist without 0's
add 0's at the end of list
put list elements back into nums
TC-O(n) SC-O(n)

MIII - Snow ball approach - TC-O(n) SC-O(1)

