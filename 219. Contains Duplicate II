QUESTION ASKS ---
Find 2 numbers in the array that are equal and are at most k apart from each other.

/* USING HASHMAP */
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])) map.put(nums[i],i);//putting first occurence of all in map
        }
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i]) && map.get(nums[i])!=i){
                if(Math.abs(map.get(nums[i])-i)<=k) return true;
                map.put(nums[i],i); //update hashmap with new occurence to further check for any appearing duplicates
            }
        }
        return false;
    }
}

LOGIC ---
Store all first occurences of nums[i] in hahsmap.
Then we check for any duplicates and by comparing indexes we find whether they are in k distance.
Even if not in k distace we update hashmap with the new duplicate occurnece to check any duplicate might appear later in k distace.


/* BRUTE FORCE TLE */
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]==nums[j] && Math.abs(i-j)<=k) return true;
            }
        }
        return false;
    }
}


/* SLIDING WINDOW */
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int n=nums.length;
        HashSet<Integer> set=new HashSet<Integer>();    //will work as window of k size
        int min=Math.min(k,n);
        for(int i=0;i<min;i++){ //making a first window of k
            if(set.contains(nums[i])) return true;  //if already found a match
            set.add(nums[i]);
        }
        for(int i=k;i<n;i++){
            if(set.contains(nums[i])) return true;
            set.add(nums[i]);
            set.remove(nums[i-k]);  //again removing the element k units back to maintain k size
        }
        return false;
    }
}
