/* O(nloglogn) SIEVE */
class Solution {
    public int countPrimes(int n) {
        boolean isPrime[] = new boolean[n+1];
        Arrays.fill(isPrime, true);
        for(int i=2;i*i<n;i++){
            if(isPrime[i]==true){
                for(int j=2*i;j<=n;j+=i){
                    isPrime[j]=false;
                }
            }
        }
        int count=0;
        for(int i=2;i<n;i++){
            if(isPrime[i]==true) count++;
        }
        return count;
    }
}


/* SIEVE MORE OPTIMISED */
class Solution {
    public int countPrimes(int n) {
        boolean isPrime[] = new boolean[n+1];
        Arrays.fill(isPrime, true);
        for(int i=2;i*i<n;i++){
            if(isPrime[i]==true){
                for(int j=i*i;j<=n;j+=i){
                    isPrime[j]=false;
                }
            }
        }
        int count=0;
        for(int i=2;i<n;i++){
            if(isPrime[i]==true) count++;
        }
        return count;
    }
}


/* SIEVE RATROSTHENES BEST CODE */
class Solution {
    public int countPrimes(int n){
        if(n<2) return 0;
        boolean isPrime[] = new boolean[n+1];
        Arrays.fill(isPrime, true);
        int primes=0;
        for(int i=2;i<n;i++){
            if(isPrime[i]==true){
                primes++;
                if((long)i*i<n){
                    for(int j=i*i;j<=n;j+=i){
                        isPrime[j]=false;
                    }
                }
            }
        }
        return primes;
    }
}

LOGIC---
Loop through the array from 2 to the square root of n.
For each number, if it is marked as prime, then mark all of its multiples as not prime by updating -


/* TLE */
class Solution {
    public int countPrimes(int n){
        int count=0;
        for(int i=2;i<n;i++){
            if(isPrime(i)) count++;
        }
        return count;
    }

    public boolean isPrime(int n){
        if(n==2 || n==3) return true;
        for(int i=2;i*i<=n;i++){
            if(n%i==0) return false;
        }
        return true;
    }
}
