/* MEMOISATION DP */
class Solution {
    public int uniquePathsWithObstacles(int[][] grid){
        int dp[][] = new int[grid.length+1][grid[0].length+1];
        for(int row[]:dp) Arrays.fill(row, -1);
        return solve(grid, 0, 0, dp);
    }

    public static int solve(int grid[][], int i, int j, int dp[][]){
        if(i==grid.length-1 && j==grid[0].length-1 && grid[i][j]==0) return 1;  //last box is without obstacle
        if(i>=grid.length || j>=grid[0].length || grid[i][j]==1) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int down = solve(grid, i+1, j, dp);
        int right = solve(grid, i, j+1, dp);
        return dp[i][j]=down+right;
    }
}


/* RECURSION TLE */
class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        return solve(grid, 0, 0);
    }

    public static int solve(int grid[][], int i, int j){
        if(i==grid.length-1 && j==grid[0].length-1 && grid[i][j]==0) return 1;  //last box is without obstacle
        if(i>=grid.length || j>=grid[0].length || grid[i][j]==1) return 0;
        int down = solve(grid, i+1, j);
        int right = solve(grid, i, j+1);
        return down+right;
    }
}


/*
LOGIC---
The down and right variables represent the number of unique paths from the current cell (i, j) to the destination (grid.length-1, grid[0].length-1) by moving downwards or rightwards, respectively.
*/
