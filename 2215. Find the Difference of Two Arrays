/* O(n) SOLUTION  BEATS 11% */
class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        ArrayList<List<Integer>> ans = new ArrayList<>();
        ArrayList<Integer> ans1 = new ArrayList<>();
        ArrayList<Integer> ans2 = new ArrayList<>();
        HashSet<Integer> set1 = new HashSet<>();        //taking set to store all the elements in them to compare
        HashSet<Integer> set2 = new HashSet<>();

        for(int i=0;i<nums1.length;i++){
            set1.add(nums1[i]);
        }
        for(int i=0;i<nums2.length;i++){
            set2.add(nums2[i]);
        }

        for(int i=0;i<nums1.length;i++){
            if(!set2.contains(nums1[i])){   //finding distinct elements for nums2 using nums1
                if(!ans1.contains(nums1[i])) ans1.add(nums1[i]);    //to get distinct elements make sure not to double count the number already added to ans
            }
        }

        for(int i=0;i<nums2.length;i++){
            if(!set1.contains(nums2[i])) {
                if(!ans2.contains(nums2[i])) ans2.add(nums2[i]);
            }
        }

        ans.add(ans1);
        ans.add(ans2);
        return ans;
    }
}


LOGIC --- We are using HashSet and not other datastructures like ArrayList to make sure that comparisons take O(1) time  


/* O(n) BEATS 86% */
class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        List<Integer> ans1 = new ArrayList<Integer>();
        List<Integer> ans2 = new ArrayList<Integer>();
        Set<Integer> set1 = new HashSet<Integer>();
        Set<Integer> set2 = new HashSet<Integer>();        
        
        for(int n : nums1) set1.add(n);
        for(int n : nums2) set2.add(n);
        for (int n : set1){
            if(set2.contains(n) == false){
                ans1.add(n);
            }
        }
        for (int n : set2){
            if(set1.contains(n) == false){
                ans2.add(n);
            }
        }
        ans.add(ans1);
        ans.add(ans2);
        return ans;
    }
}

NOTE - Here we did not need to check that wheterh the ans list already contaisn the distinct element becuase we are looping in set containg array elements
