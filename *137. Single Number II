/* O(n) SOLUTION USING XOR */


LOGIC---
a^0=a
a^a=0
Since each elemnt appears twice their xor becoems xor while xor of the single number remaisn the number itself.
TC - O(n)
SC - O(1)


/* USING HASHMAP */
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])) map.put(nums[i],1);
            else map.put(nums[i], map.get(nums[i])+1);
        }
        for(int i=0;i<nums.length;i++){
            if(map.get(nums[i])==1) return nums[i];
        }
        return -1;
    }
}

TC - O(n)
SC - O(n)


/* COUNTING SET BITS */


/* USING SORTING */
class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i=1;i<nums.length;i+=3){
            if(nums[i]!=nums[i-1]) return nums[i-1];
        }
        return nums[nums.length-1]; //loop never reaches the last element, so if it didn't happen then the last element is single
    }
}

LOGIC ---
Sort the array.
Traverse the array and check if one of the adjacent elements is equal to the current element or not.
If yes , move ahead. Else return the current element.
TC - O(nlogn)
SC - O(1)

eg - [1,2,2,2,3,3,3,4,4,4] => 1
[1,1,1,2,2,2,3,3,3,4] => 4
