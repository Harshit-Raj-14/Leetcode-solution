/* Memo - Bottom Up DP */
class Solution {
    public long mostPoints(int[][] questions) {
        long dp[] = new long[questions.length+1];
        Arrays.fill(dp, 0);

        for(int i=questions.length-1;i>=0;i--){
            int point = questions[i][0];
            int skip = questions[i][1];

            int nextQuestion = Math.min(questions.length, i+skip+1);
            dp[i]= Math.max(dp[i+1], point+dp[nextQuestion]); //skipping or not skipping
        }
        return dp[0];
    }
}


LOGIC ---
We can solve or skip ( 2 options ) => giving rise to two possiblities at each step -> standard DP thinking

Think of the input as:
    Points    Brainpower
Q1    3           2
Q2    4           3  
Q3.... like this and so on
So, basically column 1 is points and column 2 is brainpower and the row numbers are the question number





/* RECURSION + MEMORIZATION - ACCEPTED */
class Solution {
    public long mostPoints(int[][] questions) {
        long dp[]=new long[questions.length+1];  //dp array to memorize the solution for each question
        Arrays.fill(dp,-1);
        return solve(0, questions,dp);     //index starts from 0(1st question)
    }

    public long solve(int index, int[][] questions, long[] dp){
        if(index>=questions.length) return 0;   //base case index reaches beyond array
        if(dp[index]!=-1) return dp[index];
        long takeIt = questions[index][0] + solve((index + questions[index][1] + 1), questions, dp);//points + solve(skip index by,que)
        long leaveIt = solve(index+1, questions, dp);
        return dp[index] = Math.max(leaveIt, takeIt);
    }
}

LOGIC ---
Make a dp array and fill with -1 based one ach position,
we update the value with points and check if it is still -1 we calculate and if it is not -1 its already calculated.

/* RECURSION - TIME LIMIT EXCEEDED */
class Solution {
    public long mostPoints(int[][] questions) {
        return solve(0, questions);     //index starts from 0(1st question)
    }

    public long solve(int index, int[][] questions){
        if(index>=questions.length) return 0;   //base case index reaches beyond array
        long takeIt = questions[index][0] + solve((index + questions[index][1] + 1), questions);  //points + solve(skip index by,que)
        long leaveIt = solve(index+1, questions);
        return Math.max(leaveIt, takeIt);
    }
}


//////////////////////////////////////////////////////////////////////////////
TO LEARN HOW TO SOLVE THESE KINDS OF DP QUESTIONS SEE - UNCROSSED LINES SLEETCODE
