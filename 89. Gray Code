class Solution {
    public List<Integer> grayCode(int n){
        if(n==1){
            ArrayList<Integer> list = new ArrayList<>();
            list.add(0);
            list.add(1);
            return list;
        }
        List<Integer> code = grayCode(n-1);    //previous graycode for n-1
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i=0;i<code.size();i++){
            ans.add(code.get(i));
        }
        for(int i=code.size()-1;i>=0;i--){
            ans.add(code.get(i)+code.size());
        }
        
        return ans;
    }
}

/*
LOGIC---
CONDITIONS OF GRAY CODE-
    Every integer is in the inclusive range [0, 2n - 1].: True.
    The first integer is 0,: True.
    An integer appears no more than once in the sequence.: True.
    The binary representation of every pair of adjacent integers differs by exactly one bit.: True.
    The binary representation of the first and last integers differs by exactly one bit.: True.

Approach
Base Case:
    If n is 1, the code returns a list containing 0 and 1, which are the Gray codes for n = 1.

Recursive Case:
    If n is greater than 1, the code calls itself with n - 1 to get the list of (n-1)-bit Gray codes (code).

Generate n-bit Gray Codes:
    The code then creates a new list ans and adds all elements of code to ans. 
    After that, it iterates over code in reverse order and adds each element plus the count of 
    elements in code to ans. This is based on the property of Gray code that the n-bit Gray codes 
    can be generated by reflecting the list of (n-1)-bit Gray codes and prefixing the reflected codes with 1.
    
Return Gray Codes:
    The code returns ans, which contains the n-bit Gray codes.

*/
