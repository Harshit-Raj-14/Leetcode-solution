class Solution {
    public int[] deckRevealedIncreasing(int[] deck){
        Arrays.sort(deck);
        boolean skip = false;
        int ans[] = new int[deck.length];
        int idx=0;
        for(int i=0;i<deck.length;){
            if(ans[idx]==0){
                if(!skip){
                    ans[idx]=deck[i];
                    i++;
                }
                skip=!skip; //toggle skip to alternate between adding and skipping cards
            }
            idx=(idx+1)%deck.length;    //progress to next index of result array => its simply i++ but to come back to the right index modulo with array length
        }
        return ans;
    }
}

/*
LOGIC---
The goal is to reveal the deck in increasing order. 
We start by sorting the deck in increasing order, so we can work backward to the special order.

Once you observe the test case, after sorting if you start putting elements after skipping one element in the answer you will get the required order.

Input:  1 2 3 4 5 6 7 8

First Pass:
Result: 1 _ 2 _ 3 _ 4 _

Second Pass:
Result: 1 5 2 _ 3 6 4 _

Output (Third Pass):
Result: 1 5 2 7 3 6 4 8

*/


/* USING QUEUE */
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        int N = deck.length;
        Queue<Integer> queue = new LinkedList<>();
        // Create a queue of indexes
        for (int i = 0; i < N; i++) {
            queue.add(i);
        }  
        Arrays.sort(deck);
        // Put cards at correct index in result
        int[] result = new int[N];
        for (int i = 0; i < N; i++) {
            result[queue.poll()] = deck[i];  // Reveal Card and place in result
            queue.add(queue.poll());  // Move next card to bottom
        }
        return result;
    }
}
