//LEETCODE PROBLEM
//LEVEL - Easy
//374. Guess Number Higher or Lower


/* JAVA ACCEPTED SOLUTION === BINARY SEARCH 0(log n) */
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int l=1, h=Integer.MAX_VALUE; //given in constraints
        
        while(l<=h){
            int mid = l + (h-l)/2;  //int mid = (l+h) >>>1; makes program faster also overflow won't occur becuase it works on bits
            if(guess(mid)==0) return mid;
            if(guess(mid)==1) l=mid+1;
            if(guess(mid)==-1) h=mid-1;
        }
        return -1;    
    }
}
LOGIC - here we had been asked to find the number picked by the perosn with constraints 1 <= n <= 231 - 1.
So we can treat this array wiht that constriant and apply binary search to find solution.
Use the API given in question similar to binary search conditions set.

Comment. Brute-force solution (i.e., guessing each number from 1 to n iteratively) is highly inefficient. Conveniently, the guess function provides us 
a way to query ranges, i.e., by calling guess(m) we are basically asking 3 questions simultaneously:
    Is m the unknown number?
    Does the unknown number lie on the interval [1, m)?
    Does the unknown number lie on the interval (m, n]?

One of them will return a positive answer, thus, allowing us to either return the unknown number or update the interval of ignorance. 
It is known from the theory that halving the interval of ignorance is the best way to go, thus, we take a middle point on each iteration.


Probably faster, and arguably as clear is:

             int mid = (low + high) >>> 1;      // can use this


In C and C++ (where you don't have the >>> operator), you can do this:

            mid = ((unsigned int)low + (unsigned int)high)) >> 1;
            
            
            
            
            
            
    /* BRUTE FORCE TIME LIMIT EXCEEDED */
    public class Solution extends GuessGame {
    public int guessNumber(int n) {
        for (int i = 1; i < n; i++)
            if (guess(i) == 0)
                return i;
        return n;
    }
}



/* TERNARY SEARCH */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int low = 1;
        int high = n;
        while (low <= high) {
            int mid1 = low + (high - low) / 3;
            int mid2 = high - (high - low) / 3;
            int res1 = guess(mid1);
            int res2 = guess(mid2);
            if (res1 == 0)
                return mid1;
            if (res2 == 0)
                return mid2;
            else if (res1 < 0)
                high = mid1 - 1;
            else if (res2 > 0)
                low = mid2 + 1;
            else {
                low = mid1 + 1;
                high = mid2 - 1;
            }
        }
        return -1;
    }
}

AAlgorithm : Algorithm

In Binary Search, we choose the middle element as the pivot in splitting. In Ternary Search, we choose two pivots (say m1 and m2) such that the given range is 
divided into three equal parts. If the required number num is less than m1 then we apply ternary search on the left segment of m1. 
If numnum lies between m1 and m2, we apply ternary search between m1 and m2. Otherwise we will search in the segment right to m2.

Time complexity : O(log‚Å°3n)

Follow up

It seems that ternary search is able to terminate earlier compared to binary search. But why is binary search more widely used?
Ternary Search is worse than Binary Search. The following outlines the recursive formula to count comparisons of Binary Search in the worst case.
link - https://leetcode.com/problems/guess-number-higher-or-lower/solution/
Turns out Ternary Search does more comparisons than Binary Search in the worst case.


            
            
