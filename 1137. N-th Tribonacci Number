/* ITERATIVE SOLUTION O(n) */
class Solution {
    public int tribonacci(int n) {
        if(n==0) return 0;
        if(n==1 || n==2) return 1;
        int a=0, b=1, c=1;
        int sum=0;
        for(int i=3;i<=n;i++){
            sum=a+b+c;
            a=b;
            b=c;
            c=sum;
        }
        return sum;
    }
}


/* TABULATION */
class Solution {
    public int tribonacci(int n){
        if (n == 0) return 0;
        if (n == 1 || n == 2) return 1;
        int dp[] = new int[n+1];
        dp[0]=0;
        dp[1]=1;
        dp[2]=1;
        for(int i=3;i<dp.length;i++){
            dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
        }
        return dp[n];
    }
}

/* MEMOISATION */
class Solution {
    public int tribonacci(int n){
        int memo[]=new int[n+1];
        return memoisation(n, memo);   
    }

    public static int memoisation(int n, int memo[]){
        if(n==0) return 0;
        if(n==1 || n==2) return 1;
        if(memo[n]!=0) return memo[n];
        memo[n]=memoisation(n-1,memo)+memoisation(n-2,memo)+memoisation(n-3,memo);
        return memo[n];
    }
}


/* RECURSION TLE */
class Solution {
    public int tribonacci(int n) {
        if(n==0) return 0;
        if(n==1 || n==2) return 1;
        else return tribonacci(n-1)+tribonacci(n-2)+tribonacci(n-3);
    }
}
