LOGIC ---
The 2 requirements of the question are:
Move all the 0's to the end of array.
All the non-zero elements must retain their original order.



/* COMPLETELY FAILED APPROACH */
class Solution {
    public void moveZeroes(int[] nums) {
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            list.add(nums[i]);
        }
        for(int i=0, count=0;i<list.size();i++){
            if(list.get(i)==0){
                list.remove(i);
                list.add(0);
                i--;    //again need to check if possible 0 again came to i form i-1
            }
            count++;
            if(count==nums.length-1) break;
        }
        for(int i=0;i<nums.length;i++){
            nums[i]=list.get(i);
        }
    }
}

THE REAOSN THE ABOVE SOLUTION WILL TIME EXCEED BECUASE AFTER SHIFTING ALL 0's to end. 
It will then keep iterating in the end agaian and again. also you will need lot of avariables to find a way to stop loop.
If you were to remove i-- thinking it will just stop after n loops. 
It will fail to check cases when the 0 gets copied from its next element but we have moved one character forward.
