//LEETCODE PROBLEM
//LEVEL - Easy
//231. Power of Two

/* C++ SOLUTION - ACCEPTED - O(logn) */
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0) return false;
        if(n==1) return true;
        while(n>1){
            if(n%2!=0) return false;
            else n/=2;
        }
        return true;
    }
};

LOGIC : Simple iteration and checking


/* C++ SOLUTION - ACCEPTED - O(logn) */
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n==0) return false;
        while(n%2==0) n/=2;
        return n==1;
    }
};

LOGIC : Using Reminder-divident method:-




/* C++ SOLUTION - ACCEPTED - O(31 log(n)) */  //time compleixity based on for loop and inbuilt pow function
class Solution {
public:
    bool isPowerOfTwo(int n) {
        for(int i=0;i<32;i++){    
            if(n==pow(2,i)) return true;
        }
        return false;    
    }
};

LOGIC : If there is a power of 2 it will lie between
2^0,2^1,2^2,......,2^31 as it is the limit of int


/* ++ SOLUTION - ACCEPTED - O(31) */    //Beats 100%
class Solution {
public:
    bool isPowerOfTwo(int n) {
        int ans=1;
        for(int i=0;i<31;i++){     //loop is running 31 times
            if(n==ans) return true;   
            if(ans<INT_MAX/2) ans*=2;   //ans does not overlfow
        }
        return false;    
    }
};

LOGIC : Above technique this time with memorisation




/* ++ SOLUTION - ACCEPTED - O(1) */    //Bit manipulation
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n<=0) return false;
        return ((n&(n-1))==0);
    }
};

LOGIC : Bit manipulation
Let's take some good exampes :
number->binary form
3->0000 0011
4->0000 0100
5->0000 0101
6->0000 0110
7->0000 0111
8->0000 1000

The observation we can conclude is that the number which is a power of two has always compulsoryily 1 true bit.

Now consider :-
bit representation of 7  -> 0111
bit representation of 8  -> 1000
bitwise AND of 7 and 8 -> 0000
we are gonna use this property for for all numbers which are powers of two
