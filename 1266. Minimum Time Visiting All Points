class Solution {
    public int minTimeToVisitAllPoints(int[][] points){
        int dist=0;
        for(int i=0;i<points.length-1;i++){ //last point is destination
            int horizontal = Math.abs(points[i][0] - points[i+1][0]);
            int vertical = Math.abs(points[i][1] - points[i+1][1]);
            int min = Math.min(horizontal, vertical);   //consider for diagonal movement
            int max = Math.max(horizontal, vertical);
            dist += min + Math.abs(max-min);
        }
        return dist;
    }
}

/*
LOGIC---
Advance in diagonal as possible then after that go in straight line.

For proper diagons required we travel equal distances in x and y.

Moving in diagonal to make one of the x or y equals. 
So, eg : 
P(x1,y1)
Q(x2,y2)
R(x3,y3)

P to Q
move horizontal = x2 - x1
move vertical = y2 - y1

For diagonal movement we can move these many steps min(horizontal, vertical)
And the remaining |horizontal-vetical| can be travelled straight.

TC- O(n)
SC- O(1)
*/

