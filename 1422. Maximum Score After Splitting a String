class Solution {
    public int maxScore(String s) {
        int count1=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='1') count1++;
        } 
        int count0=0;
        int score=0;
        for(int i=0;i<s.length()-1;i++){    //we are travelling only to second last element
            if(s.charAt(i)=='1') count1--;
            if(s.charAt(i)=='0') count0++;
            score=Math.max(score, count1 + count0);
        }
        return score;
    }
}

/*
LOGIC---
We are trying to porduce a similar effect in second loop as shown in test case example:
eg: 001101
loop    lstring     rstring     count0      count1      score
1       0           01101       1           3           4
2       00          1101        2           3           5
3       001         101         2           2           4
4       0011        01          2           1           3
5       00110       1           2           1           3
end

At each loop we find the maximum score that could have remained.
Also, note we stopped loop at second last elemnt to allow at least last eleemtn remain in rstring.
Reason : Empty string partition not allowed.
*/
