/* Detect Cycles with a HashSet */
class Solution {
    public boolean isHappy(int n) {
        HashSet<Integer> set = new HashSet<>();
        while(n!=1 & !set.contains(n)){
            set.add(n);
            int sum = 0;
            while(n>0){
                int r = n%10;
                sum += r*r;
                n/=10;
            }
            n=sum;
        }
        return n == 1;
    }
}

//Time complexity - O(logn)
//Space complexity - O(logn)
LOGIC ---- It will only loop endlessly if we keep on doing the operation and we again get back to one of the squares in the process
So, first we need to make sure to store the squares in a set

Note : The reason we use a HashSet and not a Vector, List, or Array is because we're repeatedly checking whether or not numbers are in it. 
Checking if a number is in a HashSet takes O(1) time, whereas for the other data structures it takes O(n) time. 
Choosing the correct data structures is an essential part of solving these problems.

//Approach
Based on our exploration so far, we'd expect continually following links to end in one of three ways.
    It eventually gets to 111.
    It eventually gets stuck in a cycle.

Algorithm
There are 2 parts to the algorithm we'll need to design and code.
    Given a number nnn, what is its next number?
    Follow a chain of numbers and detect if we've entered a cycle.


    Initialise a hashset to determine whether an integer has occurred previously or not.
    Start with putting n in the set and then we will keep on adding the square sum of digit sas we go on calculating them unit we find a match. 
    Repeat the above process, until n reaches 1 or a number which has previously occurred again appears, i.e. enters into a cycle(endless loop).
    Return True if n reaches 1, else return False.
    
    Since, the question was about finding the sum of square of digit of the number. So the while loop until n becomes zero and inside while loop we are extracting the digit. So when we have to extract the digit then we find modulo of that for example :-
let's say the number is 123 so when we find modulo of this we will get 3 which is one digit and we will find the square of it and now we have to find 2 more digit from 
the number so we will assign number as 123/10 which will be 12 so in the next iteration the value of n will be 12 and the loop will run until number becomes zero.
    
    
    
/* Approach 2: Floyd's Cycle-Finding Algorithm */
class Solution {
    public int sumSquare(int n) {
        int sum = 0;
        while (n > 0) {
            int r = n % 10;
            sum += r * r;
            n /= 10;
        }
        return sum;
    }

    public boolean isHappy(int n) {
        int slow = n;
        int fast = sumSquare(n);
        while (fast != 1 & slow != fast) {
            slow = sumSquare(slow); // slow take sone step of operation
            fast = sumSquare(sumSquare(fast)); // fast takes two step of operation
        }
        return fast == 1;
    }
}

/*
 * LOGIC --- If slow catches up to fast it is an infinte loop but if slow
 * reaches 1 first its a happy number
 */
 
    https://leetcode.com/problems/happy-number/solutions/2611354/java-cycle-detection-algorithm-fast-slow-pointer/?orderBy=hot&languageTags=java
    https://leetcode.com/problems/happy-number/solutions/3011187/easy-java-solution-using-two-pointers-approach-runtime-1ms/
    https://leetcode.com/problems/happy-number/solutions/56917/My-solution-in-C(-O(1)-space-and-no-magic-math-property-involved-)/
    
    
    
    Surprisingly, we can apply the Floyd Cycle Detection (the one we used in Detect Linked List Cycle) on this problem: think of what is a cycle in this case:

from a number A, we can get to another B using the ways given in this case
from number B, when we doing the transformation, we will eventually get back to B again ---> this forms a cycle (infinite loop)

for example:
1^2 + 1^2 = 2
2^2 = 4 ------> notice that from here we are starting with 4
4^2 = 16
1^2 + 6^2 = 37
3^2 + 7^2 = 58
5^2 + 8^2 = 89
8^2 + 9^2 = 145
1^2 + 4^2 + 5^2 = 42
4^2 + 2^2 = 20
2^2 + 0^2 = 4 -------> notice that we just get back to 4 again

Using Floyd Cycle Detection algorithm (fast and slow pointer), we will be able to actually get the value of B. Then the rest of task would be very simple, we simply check whether this value will be 1 or not.

You may ask: what if value "1" also appears in the cycle and we are skipping over it. Well, in that case, the value that slow and fast are equal to will be 1, as transformation of 1 is still 1, so we still cover this case.
