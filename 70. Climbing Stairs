/* TABULATION DP O(n) */
class Solution {
    public int climbStairs(int n) {
        if(n==1) return 1;
        int dp[] = new int[n+1];
        dp[1]=1;
        dp[2]=2;
        for(int i=3;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
}

LOGIC ---
recurrence relation :
dp[n] = dp[n-1] + dp[n-2]
dp[n-1] -> by a jump of 1
dp[n-2] -> by a jump of 2


/* ELEGANT SOLUTION TABULATION  USING CONSTRAINTS */
class Solution {
    public int climbStairs(int n) {
        int dp[] = new int[46]; //based on constraints
        dp[1]=1;
        dp[2]=2;
        for(int i=3;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
}


/* ELEGANT SOLUTION TABULATION  USING ARRAYLIST */
class Solution {
    public int climbStairs(int n) {
        ArrayList<Integer> dp = new ArrayList<>();
        dp.add(0);  //dp[0]
        dp.add(1);  //dp[1]
        dp.add(2);  //dp[2]
        for(int i=3;i<=n;i++){
            dp.add(dp.get(i-1)+dp.get(i-2));
        }
        return dp.get(n);
    }
}


/* MEMOISATION DP */
class Solution {
    public int climbStairs(int n) {
        int dp[]= new int[n+1];
        Arrays.fill(dp,-1);
        return ways(n,dp);
    }

    public int ways(int n, int dp[]){
        if(n==0) return 1;
        if(n<0) return 0;
        if(dp[n]!=-1) return dp[n];
        dp[n]=ways(n-1,dp) + ways(n-2,dp);
        return dp[n];
    }
}


/* RECURSION O(2^n) TLE */
class Solution {
    public int climbStairs(int n) {
        if(n==0) return 1;
        if(n<0) return 0;
        return climbStairs(n-1)+climbStairs(n-2);
    }
}
