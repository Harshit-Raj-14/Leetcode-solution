class Solution {
    public int findMaxLength(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int sum=0;
        int ans=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0) sum--;   //treat 0 as -1
            else sum++;
            if(sum==0) ans=Math.max(ans, i+1);  //the entire subarray is good
            if(map.containsKey(sum)) ans=Math.max(ans, i-map.get(sum)); //the middle part is good
            else map.put(sum, i);
        }
        return ans;
    }
}

/*
LOGIC---
If you take a closer look at this problem, this is mainly an extension of Longest Subarray with 0 sum. If we consider every 0 as -1, then this problem become same as the longest subarray with 0 sum problem.

*/
