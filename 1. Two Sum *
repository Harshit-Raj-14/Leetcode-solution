//LEETCODE PROBLEM
//LEVEL - Easy
//1. Two Sum



/* ACCEPTED JAVA 0(n^2) SOLUTION */

class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        for(int i=0; i<nums.length;i++)
        {
            for(int j=i+1; j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                    return new int[]{i, j};
            }
        }
        return new int[]{0, 0};
        
    }
}

Note :The return type of the rpogram is not integer but an array so we have returned i and j and -1 in form of an array.
Also, "You may assume that each input would have exactly one solution, and you may not use the same element twice." 
This statment means that the same index cannot be used twice.
This was the brute force approach, we fix an index and then use it while traversing other numbers and checking the sum.




/* Need to do with hashmaps */
