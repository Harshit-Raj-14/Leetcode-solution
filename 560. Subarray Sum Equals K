/* O(n) PREFIX SUM */
class Solution {
    public int subarraySum(int[] nums, int k) {
        int count=0;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0,1);
        int prefixsum=0;
        for(int i=0;i<nums.length;i++){
            prefixsum+=nums[i];
            if(map.containsKey(prefixsum-k)) count+=map.get(prefixsum-k);
            if(!map.containsKey(prefixsum)) map.put(prefixsum,1);
            else map.put(prefixsum, map.get(prefixsum)+1);
        }
        return count;
    }
}


TRUTHS & FACTS---
1.) If the prefix sum at two points(indexes) are same that means the sum lying between those two indexes is zero.
2.) If the prefix sum at two indexes(i and j) is at a differnece of k. psum[j]-psum[i]=k; That means the sum of elements lying between the two indexes is k.

Based on the above truth and facts we make a hashmap which store the prefixsum up to all indexes along with their number of times the same sum occurs. map(sum, no of occurences).
Further, for every sum encountered, we also determine the number of times sum−k has occurred already, since it will determine the number of times a subarray with sum k has occurred up to the current index.

Hence the ability to store prefixsum and its count and to use it at any time we need hashmap.

LOGIC---
Let's say at a index prefixsum=x
We need subarrays with sum k.
Then instead of directly looking for k in prefixsum
We look for prefixsum with value equal to x-k.
prefixsum = x = (x-k)+k
So, the occurence of (x-k) will be equivalent to the sum occurence of k


DRY RUN--- 
So, suppose we have an array as arr[]: [1,2,3,4,5] and k = 9
so, our answer will be '2' i.e (2 + 3 + 4 and 4 + 5)
so if we store our prefix sum array then it should looks like:
index :   0, 1, 2, 3,  4
  arr[]: [1, 2, 3, 4,  5]
prefix[]:[1, 3, 6, 10, 15]
          ↑         ↑
How, we will find our subarray (2 + 3 + 4) using prefix sum, see-
1) if we see our prefix sum at index 3 then it is 10 and also prefix sum at index 0 is 1
so, we can say that from index 0 to 3 our prefix sum increases from 1 to 10, right,
2) So on putting a question, HOW MUCH ? means how much our sum increase from index 0 to index 3
then, we simply say, we find the difference between these two sums i.e (10 - 1) is the sum that increases from index 0 to 3.
3) If (10 - 1) sum increases from index 0 to 3, then we can say that, ok, this difference, should be the sum of elements greater than index 0, and upto index 3, i.e from index 1 to index 3,right.
4) Now, if we will see then we find out (10 - 1) is nothing but our 'k' that is 9.
5) So, we find out, that a subarray may also exist if this particular condition satisified, i.e (prefix[i] - k) should exist in our map, 
	If prefix[i] - prefix[j] = k where i > j (i, j any index, in our case they are i = 3, j = 0)
	prefix[i] - k = prefix[j] (simple maths)
	i.e if we are able to find (prefix[i] - k) is exist in our map, i.e prefix[j]
	so, we can say that from index j + 1 to i, the sum of the elements is k, right na,
	hence it proves that their exist an subarray from index j + 1 to i whose sum is k.
	
Now, for subarray (4 + 5) we again find this valid see -
index :   0, 1, 2, 3,  4
  arr[]: [1, 2, 3, 4,  5]
prefix[]:[1, 3, 6, 10, 15]
                ↑       ↑
1) if we see our prefix sum at index 4 then it is 15 and also prefix sum at index 2 is 6
so, we can say that from index 2 to 4 our prefix sum increases from 6 to 15, right,
2) So on putting a question, HOW MUCH ? means how much our sum increase from index 2 to index 4
then, we simply say, we find the difference between these two sums i.e (15 - 6) is the sum that increases from index 2 to 4.
3) If (15 - 6) sum increases from index 2 to 4, then we can say that, ok, this difference, should be the sum of elements greater than index 2, and upto index 4, i.e from index 3 to index 4,right.
4) Now, if we will see then we find out (15 - 6) is nothing but our 'k' that is 9.
5) So, we find out, that a subarray may also exist if this particular condition satisified, i.e (prefix[i] - k) should exist in our map, 
	If prefix[i] - prefix[j] = k where i > j (i, j any index, in our case they are i = 4, j = 2)
	prefix[i] - k = prefix[j] na, (simple maths)
	i.e if we are able to find (prefix[i] - k) is exist in our map, i.e prefix[j]
	so, we can say that from index j + 1 to i, the sum of the elements is k, right na,
	hence it proves that their exist an subarray from index j + 1 to i whose sum is k.



/* TC-O(n^2) SC-O(n) PREFIX SUM */
class Solution {
    public int subarraySum(int[] nums, int k) {
        int prefixsum[] = new int[nums.length+1];
        prefixsum[0]=0;
        for(int i=1;i<=nums.length;i++){
            prefixsum[i]=prefixsum[i-1]+nums[i-1];
        }
        int count=0;
        for(int l=0;l<=nums.length;l++){
            for(int r=l+1;r<=nums.length;r++){
                if(prefixsum[r]-prefixsum[l]==k) count++;
            }
        }
        return count;
    }
}

LOGIC---
Make a prefix sum of size n+1
Reason it will help us to easily consdier single elemnt subarrays then
And then by subtracting ranges of prefixsum you have access to sum of all subarrays.


/* O(n^2) SOLUTION */
class Solution {
    public int subarraySum(int[] nums, int k) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            int sum=0;
            for(int j=i;j<nums.length;j++){
                sum+=nums[j];
                if(sum==k) count++;
            }
        }
        return count;
    }
}


/* BRUTE FORCE O(n^3) TLE */
GENERATE ALL SUBARRAYS
FIND THEIR SUM
CHECK THE CONDITION
