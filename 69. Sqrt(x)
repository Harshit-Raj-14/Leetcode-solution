/* BINARY SEARCH BEATS 100% O(logn) */
class Solution {
    public int mySqrt(int x) {     
        long l=0;
        long r=x;
        while(l<=r){
            long mid = l + (r-l)/2;
            if(mid*mid==x) return (int)mid;
            else if(mid*mid<x) l=mid+1;
            else r=mid-1;
        }
        return (int)r;  //the reason we return high here is becuase that's where mid will be in the final stage, while l would have corssed over
    }
}



/* LINEAR SEARCH O(sqrt(n)) */
class Solution {
    public int mySqrt(int x) {
        int i=1;
        for(;i<=x/i;i++){   //using division instead of multiplication to avoid integer overflow
            if(i==x/i) return i;
        }
        return i-1; //returning (i-1) because at some point (i*i) became greater than x and loop stopped
    }
}




///////// OTHER METHODS //////////
class Solution {
    public int mySqrt(int x) {
        //double error = 0.000001; //define the precision of your result
      double s = x;

    while ((s - x / s) > error) //loop until precision satisfied 
    {
        s = (s + x / s) / 2;
    }
    return (int)s;
}
}
     



/* BABYLONIAN METHOD OR NEWTON'S METHOD  */
class Solution {
    public int mySqrt(int x) {
      double error = 0.00001; //define the precision of your result
      double s = x;

    while ((s - x / s) > error) //loop until precision satisfied 
    {
        s = (s + x / s) / 2;
    }
    return (int)s;
    }
}



/* BASIC WRONG APPROACH */
//PROBLEMS : will only work for perfect square number and time taking
class Solution {
    public int mySqrt(int x) {
       for(int i=0; i<=x/2;i++)
       {
           if(i*i==x)
               return i;
    }
    return -1;
    }
}
