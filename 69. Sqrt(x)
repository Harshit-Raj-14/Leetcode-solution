/* BINARY SEARCH BEATS 100% O(logn) */
class Solution {
    public int mySqrt(int x) {     
        long l=0;
        long r=x;
        while(l<=r){
            long mid = l + (r-l)/2;
            if(mid*mid==x) return (int)mid;
            else if(mid*mid<x) l=mid+1;
            else r=mid-1;
        }
        return (int)r;  //the reason we return high here is becuase that's where mid will be in the final stage, while l would have corssed over
    }
}

LOGIC ---
mid*mid can cause integer overlow so, we use long

INTERVIEW FOLLOW UP QUESTION
We have bene printing only the itnegral part of the solution but how cna you also get the fractional part.
LOFIC -- eg : for x=28 : sqrt(x) = 5.291....
So, we already got 5 as ans from above
Now consider:
5^2<28
(5+0.1)^2<28 --- keep on adding 0.1
(5.1+0.1)^2<28
(5.2+0.1)^2>28 so stop
Now we can continue the same with adding 0.01 to 5.2 from where before our condition became false. Also, you keep on updating solution till you reach the precision you want it to have

-------- Code --------
#include<iostream>
using namespace std;
 long long int sqrtInteger(int n) {   
        int s = 0;
        int e = n;
        long long int mid = s + (e-s)/2;        
        long long int ans = -1;
        while(s<=e) {          
            long long int square = mid*mid;           
            if(square == n) return mid;        
            if(square < n ){
                ans = mid;
                s = mid+1;
            }
            else e = mid - 1;
            mid = s + (e-s)/2;
        }
        return ans;
    }

double morePrecision(int n, int precision, int tempSol) {   //precision is till how many decimal number we want 
    double factor = 1;
    double ans = tempSol;       //we need to store our ans in double sinc ewe will be getting ans in integer+fractional parts as well
    for(int i=0; i<precision; i++) {
        factor = factor/10;     //0.1, 0.01, 0.001, .....
        for(double j=ans; j*j<n; j+=factor ){
            ans = j;    //updating the solution each time till condition is met
        }
    }
    return ans;
}

int main() {
    int n;
    cout <<" Enter the number " << endl;
    cin >> n;
    int tempSol = sqrtInteger(n);
    cout <<" Answer is " << morePrecision(n, 3, tempSol) << endl;
    return 0;
}





////////////////// OTHER SOLUTIONS //////////////////////



/* LINEAR SEARCH O(sqrt(n)) */
class Solution {
    public int mySqrt(int x) {
        int i=1;
        for(;i<=x/i;i++){   //using division instead of multiplication to avoid integer overflow
            if(i==x/i) return i;
        }
        return i-1; //returning (i-1) because at some point (i*i) became greater than x and loop stopped
    }
}




///////// OTHER METHODS //////////
class Solution {
    public int mySqrt(int x) {
        //double error = 0.000001; //define the precision of your result
      double s = x;

    while ((s - x / s) > error) //loop until precision satisfied 
    {
        s = (s + x / s) / 2;
    }
    return (int)s;
}
}
     



/* BABYLONIAN METHOD OR NEWTON'S METHOD  */
class Solution {
    public int mySqrt(int x) {
      double error = 0.00001; //define the precision of your result
      double s = x;

    while ((s - x / s) > error) //loop until precision satisfied 
    {
        s = (s + x / s) / 2;
    }
    return (int)s;
    }
}



/* BASIC WRONG APPROACH */
//PROBLEMS : will only work for perfect square number and time taking
class Solution {
    public int mySqrt(int x) {
       for(int i=0; i<=x/2;i++)
       {
           if(i*i==x)
               return i;
    }
    return -1;
    }
}
