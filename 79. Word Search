class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                if(board[i][j]==word.charAt(0)){
                    if(find(board, i,j,word,0)) return true;
                }
            }
        }
        return false;
    }

    public static boolean find(char[][] board, int i, int j, String word, int idx){ //id xis indexing over word
        if(idx==word.length()) return true;
        if(i<0 || j<0 || i>board.length-1 || j>board[0].length-1) return false;  //simple base cases
        if(board[i][j]!=word.charAt(idx)) return false;  //character is not in word
        if(board[i][j]=='$') return false;  //if we tried to visit already visited box

        char temp = board[i][j];
        board[i][j]='$';    //marking it as visited
        //Now check in all four directions each working others counterpart as a backtrack => up&down, left&right
        boolean up = find(board, i-1, j, word, idx+1);
        boolean left= find(board, i, j-1, word, idx+1);
        boolean right = find(board, i, j+1, word, idx+1);
        boolean down = find(board, i+1, j, word, idx+1);
        board[i][j]=temp;   //fixing back the board

        return up || left || right ||down;   //if any is true move forward with the search
    }
}

/*
LOGIC---
First we realise that we can start from one position and decide where to move next choosing horizontally or diagonally as long as we get the matching character from word.
If no match move back to previous step.
To mkae sure we do not try to use a previous taken into account char we can replace it with antoher char.

First we have to find the first letter to start, which gives time O(N^2), then for each search step it has 2~4 neighbours to go, and it has k steps, where k is the length of the word to be searched.

Algorithm:
First find which letter in board matches the first letter of word. From there we can start looking for the word
Now we have four directions to move up, down, left and right each working as counterpart as a backtracking step.
If ever reaches end of word we found it.
else not found.


** Follow up: Could you use search pruning to make your solution faster with a larger board? **

use the frequency counting of the letters of the word in the board to check if some letter of the word doesn't exist in the board, returning false immediately without ever backtraking. This was the pruning that get me out of the TLE.

a smart pruning technique is to check the frequency of first and last char of the word in the board, and if the freq of first char is greater than last one, simple reverse the string and find the result
It will reduce the number of starting cells for dfs
*/
