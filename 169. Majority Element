//LEETCODE PROBLEM
//LEVEL - Easy
//169. Majority Element


/* JAVA ACCEPTED SOLUTION O(n^2) */
class Solution {
    public int majorityElement(int[] nums) {
        int a=nums.length/2;
        
        for(int i=0;i<nums.length;i++)
        {
            int temp=nums[i];
            int count=0;
            for(int j=0;j<nums.length;j++)
            {
                if(nums[j]==temp)
                    count++;
            }
            if(count>a)
                return temp;
        }
        return -1;
        
    }
}
Approach I : Two for loops. 
Iterate through each eleemnt of the nums array. For each element, iterate again through the nums array and count the occurence of that element. 
If count is greater than floor(n/2) then the element is the majority element.
TC- O(n^2)
SC - O(1)



Approach II : HashMap
Iterate through each eleemnt of the aray and increment its count in the map. Here, key will be an elemnt present in nums and value will be the count. 
Now iterate through the map and return the eleemnt with a count value greater than floor(n/2).
TC - O(n)
SC - O(1)
// Hashtable 
public int majorityElement2(int[] nums) {
    Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();
    //Hashtable<Integer, Integer> myMap = new Hashtable<Integer, Integer>();
    int ret=0;
    for (int num: nums) {
        if (!myMap.containsKey(num))
            myMap.put(num, 1);
        else
            myMap.put(num, myMap.get(num)+1);
        if (myMap.get(num)>nums.length/2) {
            ret = num;
            break;
        }
    }
    return ret;
}





Approach III SORTING : TWO LINE SOLUTION
Why if you ask asorting?
As per the question it says that to find the element that appears more than n/2 times, so after sorting, the majority element always ends up taking the n/2th position.
example : n=10, sorted nums=[1,2,3,3,4,4,4,4,4,4]
n/2 = 10/2 =5
So at 5th index is the answer =4
TC -O(nlogn)
SC- O(1)
DEEP EXPLANATION :When an element appears more than n/2 times in the array, the middle one must be the "majority" number when array is sorted.

Think about this example:

Assume O is the "majority" and X is other numbers. The two extreme cases:

O is at the front.

[O O O O X X X]

O is at the end.

[X X X O O O O]

They both must have the "majority" number in the middle.

All the other cases:

No matter how you shift X to the front or the end, O must be in the middle:

[X O O O O X X]

[X X O O O O X]
That was really subtle.
Though the complexity increases due to sorting, I can't disagree that it is one of the better solutions and definitely one of the solutions 
that you can start with in your interviews before trying to improve for complexity.

// RECURSIVE CODE - ONLY TWO LINER
public int majorityElement1(int[] nums) {
    Arrays.sort(nums);
    return nums[nums.length/2];
//ok, got it. it's trick. An assumption is the frequency of majority element > n/2




Approach IV - Boyer Moore Majority VOTING ALGORITHM : Best Solution
TC- O(n) 
SC - O(1)
BEST METHOD
LINK - https://medium.com/@ashaynayak50/interview-question-16-efficient-technique-to-find-majority-element-9dc9a4c355c
Great idea!
And I want to express my thinking of this solution.

When count != 0 , it means nums[1...i] has a majority,which is major in the solution.
When count == 0 , it means nums[1...i ] doesn't have a majority, so nums[1...i ] will not help nums[1...n].And then we have a subproblem of nums[i+1...n].

I think it's kind of DP.

//
class Solution {
    public int majorityElement(int[] nums) {
        int major=nums[0], vote=1;  //vote is count of element
        for(int i=1;i<nums.length;i++){
            if(vote==0){
                major=nums[i];
                vote++;
            }
            else if(nums[i]==major) vote++;
            else vote--;
        }
        return major;
    }
}




/*   BIT MANIPULATION    */
public int majorityElement(int[] nums) {
        int[] bit = new int[32];
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < 32; j++) {
                bit[j] += (nums[i] >> j) & 1;
            }
        }
        int majority = 0;
        for (int j = 0; j < 32; j++) {
            bit[j] = bit[j] > (nums.length / 2)? 1 : 0;
            majority += bit[j] << j;
        }
        return majority;
    }
