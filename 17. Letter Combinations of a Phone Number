class Solution {
    public static void solve(String digits, HashMap<Character, String> map, int idx, String temp, List<String> ans){
        if(temp.length()==digits.length()){
            ans.add(temp);
            return;
        }
        for(int i=0; i<map.get(digits.charAt(idx)).length(); i++){
            temp+=map.get(digits.charAt(idx)).charAt(i);  //add curr letter, do the job on current number
            // Recursively explore the next digit
            solve(digits, map, idx+1, temp, ans);   //let's move to the next number
            StringBuilder sb= new StringBuilder(temp);  //I want another possiblity of that no
            // backtracking to explore other combinations
            sb.deleteCharAt(sb.length()-1);  // Remove the current letter from the path before
            temp = sb.toString();
        }
    }

    public List<String> letterCombinations(String digits) {
        HashMap<Character, String> map = new HashMap<>();
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        
        ArrayList<String> ans = new ArrayList<>();

        if(digits.equals("") || digits==null) return ans;
        solve(digits, map, 0, "", ans);
        return ans;
    }
}


/*
LOGIC---
Thought it simply what to do as question ask us to do.
First you put everything in map to have a record of.
Then think first you press first digit of pad. that is something you must increase at every next step. 
What you have a choice is to choose which alphabet of that number or not.
So, first consider taking that alphabet or not taking it(backtrack to previous state).

Now choose only those formed string sthat will be equal to the length of digits. only that much character we cna type after all.

Time complexity: O(3^n) or O(4^n) [Simple permutation ways]
n is length of input string. Each digit has 3 or 4 letters. For example, if you get "23"(n) as input string, we will create 9 combinations which is O(3^2) = 9

Space complexity: O(n)
n is length of input string. This is for recursive call stack.
*/
