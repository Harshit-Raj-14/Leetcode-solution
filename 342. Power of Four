/* USING BIT MANIPULATION */
class Solution {
    public boolean isPowerOfFour(int n) {
        if(n==0) return false;
        return ((n&(n-1))==0 && ((n-1)%3==0));
    }
}

LOGIC---
If it is a power of 2 and then there are even number of 2's then it is a power of 4

We all know that if the power n is even, this the num is power of 4, otherwise power of 2 when n is odd. So the basic idea is trying to play with the power n in 4^n.

1.num & (num - 1) is to ensure only one bit of this number is 1, which means it is either power of 2 or power of 4.

2.Then it is to check odd or even.
As we know power of 4 is a subset of power of 2, we should add more conditions to filter this subset on top of the result of step 1. 
We should find a condition that fits power of 4 and not fits power of 2. Which is (num - 1) % 3 == 0. 
Because product of 3 consecutive numbers must be divisible by 3. 4^n - 1 == (2^n - 1)(2^n + 1). 2^n could not be the one. 
So this is sufficent to cover all the numbers that are power of 4. All powers of 4 can be applied.


/* USING BIT MANIPULATION */
public class Solution {
    public boolean isPowerOfFour(int n) {
        if (n > 0 && (n & (n - 1)) == 0) {
            int zero_count = 0;
            while (n > 0) {
                zero_count++;
                n >>= 1;    //right shifting n by 1
            }
            return zero_count % 2 != 0;
        }
        return false;
    }
}

/*
Cehck power of 2
Then check at what place 1 occurs

The binary representation of numbers with powers of four are the even powers of two
i.e
1 = 00000001
4 = 00000100
16 = 00010000
64 = 01000000

so the 1 arrives only at odd positions and there will only one 1 present in binary.
*/


/* USING LOGARITHMS */
public class Solution {
    public boolean isPowerOfFour(int n) {
        // If 'n' is 1, it is a power of four
        if (n == 1) return true; 
        // If 'n' is non-positive, it cannot be a power of four
        if (n <= 0) return false;  
        // Calculate the logarithm of 'n' with base 4
        double logarithmBase4 = Math.log(n) / Math.log(4);
        // Check if the result of the logarithmic operation is an integer
        return (logarithmBase4 == (int)logarithmBase4);
    }
}

