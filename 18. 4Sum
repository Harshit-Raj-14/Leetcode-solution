/* TWO POINTER O(n^3) */
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(i>0 && nums[i]==nums[i-1]) continue; //skip duplicates
            for(int j=i+1;j<nums.length;j++){
                if(j>i+1 && nums[j]==nums[j-1]) continue; //skip duplicates
                //TWO POINTER
                int l=j+1;
                int r=nums.length-1;
                while(l<r){
                    long sum = (long)nums[i] + (long)nums[j] + (long)nums[l] + (long)nums[r];   //stupid testcase
                    if(sum==target){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[l]);
                        temp.add(nums[r]);
                        ans.add(temp);
                        l++;
                        r--;
                        // skip the duplicates:
                        while (l<r && nums[l]==nums[l-1]) l++;
                        while (l<r && nums[r]==nums[r+1]) r--;
                    }
                    else if (sum < target) l++;
                    else r--;
                }
            }
        }
        return ans;
    }
}

/*
LOGIC---
Iterate for two outer loops and for the last two inner loops relace it with a two pointer iteration.
making it O(n^3)
don't forget to skip duplicates for each quadruplet
*/
