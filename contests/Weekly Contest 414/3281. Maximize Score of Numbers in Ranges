class Solution{
    public int maxPossibleScore(int[] arr, int d) {
        Arrays.sort(arr);
        int l=0;
        int r=Integer.MAX_VALUE;
        int ans=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(binary(arr, d, mid)){
                l=mid+1;
                ans=mid;
            }
            else r=mid-1;
        }
        return ans;
    }

    public static boolean binary(int start[], int d, int mid){  //to find whether our mid works as score
        int prev=start[0];   //first number chosen from first interval -> let's make it the start
        for(int i=1;i<start.length;i++){
            //prev+mid is basically our next number to be, so it should lie in the next interval
            if(prev+mid>=start[i] && prev+mid<=start[i]+d) prev+=mid;  //make it the next number
            else if(prev+mid<start[i]) prev=start[i];
            else return false;
        }
        return true;
    }
}

/*
LOGIC---
Sorting the array would yield intervals start points in an increasing order.

Input:
start = [2, 6, 13, 13]
d = 5
This creates the following intervals:
Interval 1: [2,2+5] = [2,7]
Interval 2: [6,6+5] = [6,11]
Interval 3: [13,13+5] = [13,18]
Interval 4: [13,13+5] = [13,18]

Goal:
Choose one integer from each interval such that the minimum absolute difference between any two selected integers is as large as possible.

According to the ans, if we select 2, 7, 13, and 18 from the respected intervals , The minimum absolute difference between any pair of chosen integers is 5 (18-13, 7-2). Since this is the largest possible minimum absolute difference we can achieve, the maximum possible score is 5.

So, we would want each of the selected numbers to be far spread out .to bring the minimum absolute difference to maximum.

So, we say why not directly find the optimum score(minimum absolute difference that will be possible).

Search space : 0 to max_value  to think less
Nature : YYYYYYYNNNNN => find first Y

*/