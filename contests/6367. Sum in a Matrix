/* O(n^2) SOLUTION ACCEPTED */
class Solution {
    public int matrixSum(int[][] nums) {
        int l=0, r=nums[0].length-1, t=0, b=nums.length-1;
        int score=0;
        
        for (int i = 0; i < nums.length; i++) {
            int[] row = nums[i];
            Arrays.sort(row);
        }
        
        while(l<=r){
            int max=0;
            for(int i=t;i<=b;i++){
                int curr = nums[i][l];
                max = Math.max(max,curr);
            }
            l++;
            score+=max;
        }
        return score;
    }
}


LOGIC ---- Why sort the array first
Because in every iteration we have to remove the maximum element from each row. 
It is not mandatory that the maximum element will always be at column number i so we sort every row in order to make sure that the maximum number is at ith column.
The question has specifically asked us to - From each row in the matrix, select the largest number and remove it. So first sort it rowwise to get the largest element first.

Could also do this for sorting - 
for (int[] row : nums) {
        Arrays.sort(row);
} 
