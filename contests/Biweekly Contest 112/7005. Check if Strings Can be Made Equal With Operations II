/* O(nlogn) SOLUTION */
class Solution {
    public boolean checkStrings(String s1, String s2) {
        ArrayList<Character> even1=new ArrayList<>();
        ArrayList<Character> odd1=new ArrayList<>();
        ArrayList<Character> even2=new ArrayList<>();
        ArrayList<Character> odd2=new ArrayList<>();
        for(int i=0;i<s1.length();i++){
            if(i%2==0){
                even1.add(s1.charAt(i));
                even2.add(s2.charAt(i));
            }
            else{
                odd1.add(s1.charAt(i));
                odd2.add(s2.charAt(i));
            }
        }
        Collections.sort(even1);
        Collections.sort(odd1);
        Collections.sort(even2);
        Collections.sort(odd2);
        if(even1.equals(even2) && odd1.equals(odd2)) return true;
        else return false;
    }
}

/*
we can swap only i,j indices if j-i is even.
even-even=even
odd-odd=even
So,we have our pairs:
(0,2),(0,4),(0,6),(0,8)....
(1,3),(1,5),(1,7)....
(2,4),(2,6),(2,8)....
and so on...

The truth is that if the characters at these places are equal, after applying a certain number of operations we will always land up with equal strings s1 and s2.
So, we have two sets of indices : odd and even set
*/



/* o(n) USING HASHING */
class Solution {
    public boolean checkStrings(String s1, String s2) {
        int even[] = new int[26];
        int odd[] = new int[26];
        for(int i=0;i<s1.length();i++){
            if(i%2==0){
                even[s1.charAt(i)-'a']++;
                even[s2.charAt(i)-'a']--;
            }
            else{
                odd[s1.charAt(i)-'a']++;
                odd[s2.charAt(i)-'a']--;
            }
        }
        for(int i=0;i<even.length;i++){
            if(even[i]!=0 || odd[i]!=0) return false;
        }
        return true;
    }
}


LOGIC---
Instead of later thinking of sorting the arrays.
We begin with a sorted collection of alphabets in mind.
If the frequency of odd or even is anything other than zero that menas the character count in s1 did not tally to s2.
Hence, we would have faield to make them equal.