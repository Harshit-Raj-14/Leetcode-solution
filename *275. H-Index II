//LEETCODE PROBLEM
//LEVEL - Medium
//275. H-Index II

/* BINARY SEARCH O(logn) */
class Solution {
public:
    int hIndex(vector<int>& citations) {
        sort(citations.begin(),citations.end());
        
        int n = citations.size();
        if(n==0)
            return 0;
        if(citations[0]>=n)
            return n;
        int high = n-1;
        int low=0;
        int mid;
        int candidate = 0;
        
        while(low<=high)
        {
            mid=low+(high-low)/2;
            if(citations[mid]>=n-mid)
            {
                candidate = n-mid;
                high = mid-1;
            }
            else
                low = mid + 1;
        }
        return candidate;
    }
};

LOGIC: binary search, each time check citations[mid]
case 1: citations[mid] == len-mid, then it means there are citations[mid] papers that have at least citations[mid] citations.
case 2: citations[mid] > len-mid, then it means there are citations[mid] papers that have more than citations[mid] citations, so we should continue searching in the left half
case 3: citations[mid] < len-mid, we should continue searching in the right side
After iteration, it is guaranteed that right+1 is the one we need to find (i.e. len-(right+1) papars have at least len-(righ+1) citations)



/*LINEAR SEARCH O(n) */
class Solution {
    public int hIndex(int[] citations) {
        for(int i=0;i<citations.length;i++){
            if(citations[i] >= citations.length-i) return citations.length-i; 
        }
        return 0;    
    }
}
