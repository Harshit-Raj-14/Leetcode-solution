/* TWO POINTER O(n), O(n) */
class Solution {
    public int[] sortedSquares(int[] nums){
        int ans[]= new int[nums.length];
        int l=0;
        int r=nums.length-1;
        for(int i=ans.length-1;i>=0;i--){
            if(Math.abs(nums[l])>=Math.abs(nums[r])){
                ans[i]=nums[l]*nums[l];
                l++;
            }
            else{
                ans[i]=nums[r]*nums[r];
                r--;
            }
        }
        return ans;
    }
}

LOGIC---
https://robertocannella-f5b4b.web.app/coding-challenges/sorted-squares
Since the original array is not sorted, it's not guaranteed that the largest elements (in terms of absolute value) are at the ends of the array.
By iterating backwards from the end of the array, we can start populating the result array from the end, ensuring that the 
squares of larger elements occupy the higher indices of the result array.


/* SIMPLE SORTING O(logn), O(n) */
class Solution {
    public int[] sortedSquares(int[] nums) {
        for(int i=0;i<nums.length;i++){
            nums[i]=nums[i]*nums[i];
        }
        Arrays.sort(nums);
        return nums;
    }
}
