/* MEMOISATION 1D DP */
class Solution {
    public int numSquares(int sum) {
        int dp[] = new int[sum+1];
        Arrays.fill(dp, -1);
        return solve(sum, 1, dp); //don't start with 0, you will get infinte loop
    }

    public static int solve(int sum, int i, int dp[]){
        if(sum==0) return 0;    //no squares needed, stop
        if(i*i>sum || sum<0) return 1000000;    // Invalid state
        if(dp[sum]!=-1) return dp[sum];
        int not_take = solve(sum, i+1, dp);
        int take = 1+solve(sum-i*i, i, dp);
        return dp[sum]=Math.min(take, not_take);
    }
}

/* RECURSION TLE */
class Solution {
    public int numSquares(int sum) {
        return solve(sum, 1); //don't start with 0, you will get infinte loop
    }

    public static int solve(int sum, int i){
        if(sum==0) return 0;    //no squares needed, stop
        if(i*i>sum || sum<0) return 1000000;    // Invalid state
        int not_take = solve(sum, i+1);
        int take = 1+solve(sum-i*i, i);
        return Math.min(take, not_take);
    }
}


/* TABULATION */
class Solution {
    public int numSquares(int sum) {
        int[] dp = new int[sum + 1];
        Arrays.fill(dp, Integer.MAX_VALUE); // Initialize with a large value
        dp[0] = 0; // Base case: 0 squares needed to form 0 
        // Pre-compute perfect squares
        for (int i = 1; i * i <= sum; i++) {
            int square = i * i;
            for (int j = square; j <= sum; j++) {
                dp[j] = Math.min(dp[j], dp[j - square] + 1);
            }
        }
        return dp[sum]; // The minimum number of perfect squares that sum to 'sum'
    }
}


/* MEMOISATION 2D DP */
class Solution {
    public int numSquares(int sum) {
        int dp[][] = new int[sum+1][(int)Math.sqrt(sum)+1];
        for(int row[]:dp) Arrays.fill(row, -1);
        return solve(sum, 1, dp); //don't start with 0, you will get infinte loop
    }

    public static int solve(int sum, int i, int dp[][]){
        if(sum==0) return 0;    //no squares needed, stop
        if(i*i>sum || sum<0) return 1000000;    // Invalid state
        if(dp[sum][i]!=-1) return dp[sum][i];
        int not_take = solve(sum, i+1, dp);
        int take = 1+solve(sum-i*i, i, dp);
        return dp[sum][i]=Math.min(take, not_take);
    }
}
