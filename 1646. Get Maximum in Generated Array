/* O(n) SOLUTION */
class Solution {
    public int getMaximumGenerated(int n) {
        if(n==0) return 0;
        int arr[]=new int[n+1];
        arr[0]=0;
        arr[1]=1;
        for(int i=1;i<=arr.length;i++){
            if(2*i+1<n+1){
                arr[2*i] = arr[i];
                arr[2*i+1] = arr[i] + arr[i+1];
            }
        }
        return max(arr);
    }

    public int max(int arr[]){
        int max=0;
        for(int i=0;i<arr.length;i++){
            max=Math.max(max, arr[i]);
        }
        return max;
    }
}


/* ELEGANT CODE */
class Solution {
    public int getMaximumGenerated(int n) {
        if(n==0)return 0;
        if(n==1)return 1;
        int []arr=new int[n+1];
        arr[0]=0;
        arr[1]=1;
        int maxi=Integer.MIN_VALUE;
        for(int i=2;i<=n;i++){
            if(i%2==0)arr[i]=arr[i/2];
            else arr[i]=arr[i/2]+arr[(i/2)+1];
            maxi=Math.max(maxi,arr[i]);
        }
        return maxi;
    }
}
