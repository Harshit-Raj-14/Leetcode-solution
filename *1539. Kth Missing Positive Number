
/* JAVA ONE LINER */
class Solution {
    public int findKthPositive(int[] arr, int k) {
        for(int i : arr){
			if(i <= k) k++; else break;
		}
        return k;
    }
}

LOGIC- the array is in strictly increasing order and hence there is no repetition.
Think of this case, if every element in the array > k , the answer would be k.
So, for every element <= k , you need to increment k. (i.e. when you iterate from left to right). And since the array is in increasing order, 
you can break out of the loop on the first instance this condition fails.




/* FIRST TRY - JAVA ACCEPTED SOLUTION (Beats 5%) */
class Solution {
    public int findKthPositive(int[] arr, int k) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
        }
        int count[]=new int[2*1000];
        int j=0, z=0;
        for(int i=1;i<=2*1000;i++){
            if(j<arr.length){ 
                if(arr[j]==i) j++;
                else{ count[z]=i; z++;}
                }
            else{ count[z]=i; z++;}   
        }
        return count[k-1];  
    }
    }
}

LOGIC : Storing the numbers not avaialble in arr in a new count array by utilisng the fact that arr is sorted.
but the big problem is utilisation of such huge memory and making those many loops
