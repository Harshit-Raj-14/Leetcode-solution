class Solution {    
  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode();
        ListNode curr = ans;
        int carry=0;
        while(l1!=null || l2!=null){
            if(l1==null){
                int n = l2.val+carry;
                if(n>9) carry=1;
                else carry=0;
                //ans.insertNode(n%10);
                ans.next = new ListNode(n%10);
                ans = ans.next;
                l2=l2.next;
            }
            else if(l2==null){
                int n = l1.val+carry;
                if(n>9) carry=1;
                else carry=0;
                //ans.insertNode(n%10);
                ans.next = new ListNode(n%10);
                ans = ans.next;
                l1=l1.next;
            }
            else{
                int n = l1.val + l2.val + carry;
                if(n>9) carry=1;
                else carry=0;
                //ans.insertNode(n%10);
                ans.next = new ListNode(n%10);
                ans = ans.next;
                l1=l1.next;
                l2=l2.next;
            }
        }
        if(carry==1){   //adding any left carry
            ans.next = new ListNode(1);
            ans = ans.next;
        }
        return curr.next;  //since ans is our required lsit but we are currently at its end so we refer to curr head which indirectly points to answer
    }
}



/* ELEGANT CODE */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode();
        ListNode dummyhead = ans;
        int carry=0;
        while(l1!=null || l2!=null || carry!=0){
            int x = (l1!=null) ? l1.val:0;
            int y = (l2!=null) ? l2.val:0;
            int sum=x+y+carry;
            carry = sum/10;
            ans.next = new ListNode(sum%10);    //same as adding the node to ans list
            ans=ans.next;
            if(l1!=null) l1=l1.next;
            if(l2!=null) l2=l2.next;
        }
        return dummyhead.next;
    }
}
